#pragma mode( separator(.,;) integer(h32) )

EXPORT Z_Series(z)
// z:impedances {Z1, Z2, ...} → series impedance
BEGIN
  RETURN ΣLIST(z);
END;

EXPORT Z_Parallel(z)
// z:impedances {Z1, Z2, ...} → parallel impedance
BEGIN
  RETURN ΠLIST(z)/ΣLIST(ΠLIST(z)/z);
END;

EXPORT Millman(u,z)
// u:voltages {Uax,Ubx,Ucx,...}, z:impedances {Zan,Zbn,Zcn,...} → voltage Unx 
// n is the impedances neutral point, and x is any point
BEGIN
  RETURN ΣLIST(u ./ z)*Z_Parallel(z);
END;

EXPORT D_to_Y(zd)
// zd:delta impedances {Zab,Zbc,Zca} → star impedances {Zan,Zbn,Zcn}
BEGIN
  LOCAL z := ΠLIST(zd)/ΣLIST(zd);
  RETURN {z/zd(2),z/zd(3),z/zd(1)};
END;

EXPORT Y_to_D(zy)
// zy:star impedances {Zan,Zbn,Zcn} → delta impedances {Zab,Zbc,Zca}
BEGIN
  LOCAL z := zy(1)*(zy(2)+zy(3))+zy(2)*zy(3);
  RETURN {z/zy(3),z/zy(1),z/zy(2)};
END;

EXPORT EZS_U(E,Z,S)
// E:voltage source, Z:impedance, S:load power → load voltage U
BEGIN
  LOCAL ZcS := CONJ(Z)*S;
  LOCAL ImUe := IM(ZcS)/ABS(E);
  LOCAL ReUe := POLYROOT({1,-ABS(E),RE(ZcS)+ImUe^2});  
  IF TYPE(ReUe(1)) == 3 THEN
    RETURN "No solution"; // complex roots
  ELSE
    RETURN (MAX(ReUe),ImUe)*SIGN(E);
  END;
END;

EXPORT kcmil_to_mm2(kcmil)
// kcmil:area in kcmil → area in mm²
BEGIN
  RETURN kcmil*0.506707479098;
END;

EXPORT mm2_to_kcmil(mm2)
// mm2:area in mm² → area in kcmil
BEGIN
  RETURN mm2/0.506707479098;
END;

EXPORT AWG_to_mm2(AWG)
// AWG:AWG number → area in mm²
// 0, -1, -2 and -3 must be entered for AWG numbers 1/0, 2/0, 3/0 and 4/0
BEGIN
  RETURN 53.4751207321/(92^(AWG/19.5));
END;

EXPORT mm2_to_AWG(mm2)
// mm2:area in mm² → nearest AWG number
// results 0, -1, -2 and -3 are equivalent to AWG numbers 1/0, 2/0, 3/0 and 4/0
BEGIN
  RETURN ROUND(4.31245284200*LN(53.4751207321/mm2),0);
END;

EXPORT Triangle_to_Phasors(u)
// u:voltages triangle {Uab,Ubc,Uca} → voltage phasors {Uab,Ubc,Uca}
// voltage Uab is taken as the reference phasor (angle equal to zero)
BEGIN
  LOCAL φ := Triangle_Solver.SSS(u(1),u(3),u(2));
  RETURN {u(1),u(2)*(-1,0)*(1,∡φ(2)),u(3)*(-1,0)/(1,∡φ(3))};
END;

EXPORT LN_to_LL(u)
// u:line-neutral voltages {Uan,Ubn,Ucn} → line-line voltages {Uab,Ubc,Uca}
BEGIN
  RETURN {u(1)-u(2),u(2)-u(3),u(3)-u(1)};
END;

EXPORT LL_to_LN(u,z)
// u:line-line voltages {Uab,Ubc,Uca}, z:impedances {Zan,Zbn,Zcn} → line-neutral voltages {Uan,Ubn,Ucn}
BEGIN
  RETURN {u(1)/z(2)-u(3)/z(3),u(2)/z(3)-u(1)/z(1),u(3)/z(1)-u(2)/z(2)}*Z_Parallel(z);
END;

EXPORT LL_to_LG(u)
// u:line-line voltages {Uab,Ubc,Uca} → line-G voltages {Uag,Ubg,Ucg}
// G is the barycenter of the line-line voltages triangle
BEGIN
  RETURN {u(1)-u(3),u(2)-u(1),u(3)-u(2)}/3;
END;

EXPORT ABC_to_A012(x)
// x:phasors {A,B,C} → sequence phasors {A0,A1,A2}
BEGIN
  LOCAL A := [[1,1,1],[1,(-1/2,√3/2),(-1/2,-√3/2)],[1,(-1/2,-√3/2),(-1/2,√3/2)]];
  RETURN mat2list(A*list2mat(x,1)/3);
END;

EXPORT A012_to_ABC(x)
// x:sequence phasors {A0,A1,A2} → phasors {A,B,C}
BEGIN
  LOCAL A := [[1,1,1],[1,(-1/2,-√3/2),(-1/2,√3/2)],[1,(-1/2,√3/2),(-1/2,-√3/2)]];
  RETURN mat2list(A*list2mat(x,1));
END;

EXPORT AN12_to_AB12(x)
// x:line-neutral sequence phasors {AN1,AN2} → line-line sequence phasors {AB1,AB2}
BEGIN
  RETURN √3*{x(1)*exp(π*/6),x(2)*exp(-π*/6)};
END;

EXPORT AB12_to_AN12(x)
// x:line-line sequence phasors {AB1,AB2} → line-neutral sequence phasors {AN1,AN2}
BEGIN
  RETURN {x(1)/exp(π*/6),x(2)/exp(-π*/6)}/√3;
END;